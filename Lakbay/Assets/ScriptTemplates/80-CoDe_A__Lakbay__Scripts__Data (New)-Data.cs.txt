/*
 * Date Created: #DATE#
 * Author: #AUTHOR#
 * 
 * Copyright Â© #YEAR# #DEVELOPER_NAME#. All Rights Reserved.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;

using NaughtyAttributes;
using TMPro;
using YamlDotNet.Serialization;

using #NAMESPACE#.Utilities;

namespace #RELATIVE_NAMESPACE# {
    using Event = Utilities.Event;

    public interface I#SCRIPTNAME : Core.IData {

    }

    public interface I#SCRIPTNAME<T> : Core.IData<T>, I#SCRIPTNAME
        where T : IController {

    }

    [Serializable]
    public class #SCRIPTNAME# : Core.Data<Controller>, I#SCRIPTNAME#<Controller> {
        public new const string HeaderName = "#RELATIVE_NAMESPACE#.#SCRIPTNAME#";

        public #SCRIPTNAME#() : this(default(Core.IData<Controller>)) {}

        public #SCRIPTNAME#(
            Core.IData<Controller> data=null
        ) : base(data ?? new Core.Data<Controller>()) {

        }

        public #SCRIPTNAME#(I#SCRIPTNAME#<Controller> data) : this(
            
        ) {}

        public #SCRIPTNAME#(TextAsset textAsset) : this(textAsset.Parse<#SCRIPTNAME#>()) {}

        public override void OnInspectorHasUpdate() {
            base.OnInspectorHasUpdate();

        }

    }

}